// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24; 

//INTERNAL IMPORT FOR NFT OPENZEPPELIN

import "@openzeppelin/contracts/utils/Counters.sol";

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";

import  "@openzeppelin/contracts/token/ERC721/ERC721.sol";

import "hardhat/console.sol";


//import "./node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"; 


contract NFTMarketplace is ERC721URIStorage  {

    using Counters for Counters.Counter;

    Counters.Counter private _tokenIds;
    Counters.Counter private _itemsSold;

    uint256 listingPrice = 0.0025 ether;

    address payable owner;

    mapping (uint256 => MarketItem) private idMarketItem;

    struct MarketItem {
        uint256 tokenId;
        address payable seller;
        address payable owner;
        uint256 price;
        bool sold;
    }

    modifier onlyOwner {
        require(
            msg.sender == owner , 
            "only owner of the smart contract can change the listing price"
            );
            _;
    }

    event idMarketItemCreated (

        uint256 indexed tokenId,
        address seller,
        address owner,
        uint256 price,
        bool sold
    );

    constructor() ERC721("NFT Metaverse Token", "MYNFTs"){

        owner == payable(msg.sender);


    }

    function updateListingPrice(uint256 _listingPrice) public payable onlyOwner {
        listingPrice = _listingPrice;
    }

    function getListingPrice() public view returns (uint256) {
        return listingPrice;
    }

    //Let create "CREATE NFT TOKEN FUNCTION"


    function createToken(string memory tokenURI , uint256 price ) public payable returns (uint256) {

        _tokenIds.increment();

        uint256 newTokenId = _tokenIds.current();

        _mint(msg.sender , newTokenId);
        _setTokenURI(newTokenId, tokenURI);

        createMarketItem(newTokenId , price);

        return newTokenId;
    }

    //creating market items 

    function createMarketItem(uint256 tokenId , uint256 price) private {

        require(price > 0 , "price must be more than 0 ");
        require(msg.value == listingPrice , "price must be equal to listing price ");

        idMarketItem[tokenId] = MarketItem (
             tokenId,
            payable(msg.sender),
            payable(address(this)),
            price,
            false
        );

        _transfer(msg.sender, address(this), tokenId);

        emit idMarketItemCreated(
            tokenId,
            msg.sender,
            address(this),
            price,
            false
        );
    }

    

    








}









